{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\n * Created by UTOPIA SOFTWARE on 26/7/2018.\n */\n\n/**\n * file provides the \"base\" framework/utilities required to launch the app.\n * E.g. - File creates the base namespace which the app is built on.\n * - Loads all the ES moddule libraries required etc\n *\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\n * also used interchangeably\n **/\n\n\n/**\n * prepare/config the dynamic loader for all the necessary ES Modules\n */\nSystemJS.config({\n    baseURL: 'js',\n    paths: {\n        \"ej2-modules\": \"ej2-components-16.2.48\" // path is for the base folder that contains all EJ2 COMPONENT MODULES\n    },\n    map: {\n    }\n});\n/*** END OF SYSTEMJS CONFIG **/\n\n\n// constant that defines the app namespace\nconst utopiasoftware_app_namespace = 'edpms';\n\n/**\n * create the namespace and base methods and properties for the app\n * @type {{}}\n */\nconst utopiasoftware = {\n    [utopiasoftware_app_namespace]: {\n\n        /**\n         * object is responsible for handling operations on the app's cached data\n         */\n        appCachedData: {\n\n            /**\n             * method is used to download the project data to be cached. This includes project data and milestones data\n             * @param showProgressModal {Boolean}\n             * @returns {Promise<void>}\n             */\n            async loadProjectData(showProgressModal = true){\n                try{\n                    // keep device awake during the downloading process\n                    window.plugins.insomnia.keepAwake();\n\n                    if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                        // show download progress\n                        $('#determinate-progress-modal .modal-message').html('Downloading projects data for offline use...');\n                        $('#determinate-progress-modal').get(0).show();\n                        $('#determinate-progress-modal #determinate-progress').get(0).value = 30;\n                    }\n\n                    // get the projects data to be cached\n                    let serverResponse = await Promise.resolve($.ajax(\n                        {\n                            url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/loadprojects.php\",\n                            type: \"post\",\n                            contentType: \"application/x-www-form-urlencoded\",\n                            beforeSend: function(jqxhr) {\n                                jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                            },\n                            dataType: \"text\",\n                            timeout: 240000, // wait for 4 minutes before timeout of request\n                            processData: true,\n                            data: {}\n                        }\n                    ));\n\n                    serverResponse = JSON.parse(serverResponse); // convert the response to JSON object\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 35;\n\n                    // delete all previous project data/docs\n                    let allProjects = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"projects\"\n                            }},\n                        fields: [\"_id\", \"_rev\", \"PROJECTID\", \"TITLE\", \"CONTRACTSUM\", \"CONTRACTOR\", \"MDAID\", \"TYPE\"],\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    // get all the returned projects and delete them\n                    allProjects = allProjects.docs.map((currentValue, index, array) => {\n                        currentValue._deleted = true; // mark the document as deleted\n                        return currentValue;\n                    });\n\n                    // check if there are any project data to delete\n                    if(allProjects.length > 0){\n                        // delete the already saved projects\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(allProjects);\n                    }\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 45;\n\n                    // store all the project data received\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(serverResponse);\n                    // inform the user that milestone data is being downloaded for offline use\n                    $('#determinate-progress-modal .modal-message').html('Downloading milestones data for offline use...');\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 50;\n\n                    // get the milestones data to be cached\n                    serverResponse = await Promise.resolve($.ajax(\n                        {\n                            url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/loadboq.php\",\n                            type: \"post\",\n                            contentType: \"application/x-www-form-urlencoded\",\n                            beforeSend: function(jqxhr) {\n                                jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                            },\n                            dataType: \"text\",\n                            timeout: 240000, // wait for 4 minutes before timeout of request\n                            processData: true,\n                            data: {}\n                        }\n                    ));\n\n                    serverResponse = JSON.parse(serverResponse); // convert the response to JSON object\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 75;\n\n                    // delete all previous milestones /docs\n                    allProjects = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"BOQ\"\n                            }},\n                        fields: [\"_id\", \"_rev\", \"CATEGORY\", \"AMOUNT\", \"RATE\", \"PROJECTID\", \"DDATE\", \"BOQID\", \"TYPE\"],\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    // get all the returned milestones and delete them\n                    allProjects = allProjects.docs.map((currentValue, index, array) => {\n                        currentValue._deleted = true; // mark the document as deleted\n                        return currentValue;\n                    });\n\n                    // check if there are any milestone data to delete\n                    if(allProjects.length > 0){\n                        // delete the already saved milestone data\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(allProjects);\n                    }\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 100;\n\n                    // store the all the milestone data received\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(serverResponse);\n\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                }\n                finally {\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                    window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                }\n            }\n        },\n\n\n        /**\n         * object is responsible for handling operations on the project evaluation report sheet data\n         */\n        projectEvaluationReportData: {\n\n            /**\n             * method is used to upload all project evaluation report data/sheets to the server.\n             * during the process of upload, all successfully uploaded report data will be deleted\n             * from the user's device.\n             *\n             * @param showProgressModal\n             * @returns {Promise<Number>} resolves with a Promise containing\n             * the number of report sheets that were successfully uploaded OR rejects with an error object\n             */\n            async uploadProjectEvaluationReports(showProgressModal = true){\n\n                var totalReportSheets = 0; // holds the total number of report sheets to be uploaded\n\n                try{\n                    // keep device awake during the downloading process\n                    window.plugins.insomnia.keepAwake();\n\n                    if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                        // show download progress\n                        $('#determinate-progress-modal .modal-message').html('Prepping Evaluation Report for Upload...');\n                        $('#determinate-progress-modal').get(0).show();\n                        $('#determinate-progress-modal #determinate-progress').get(0).value = 1;\n                    }\n\n                    // get all the save project report sheets evaluated by the current signed in user from the app database\n                    let reportSheets = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"saved report\"\n                            }\n                        },\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    console.log(\"LENGTH \", JSON.stringify(reportSheets.docs));\n                    if(reportSheets.docs.length === 0){ // there are no report sheets to upload\n                        if(showProgressModal === true){\n                            // hide the progress loader\n                            await $('#determinate-progress-modal').get(0).hide();\n                        }\n                        window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                        return 0;\n                    }\n\n                    reportSheets = reportSheets.docs; // reassign the report sheets array\n                    totalReportSheets = reportSheets.length; // update the number of report sheets to be sent\n\n                    // upload each of the report sheets one at a time\n                    for(let index = 0; index < reportSheets.length; index = 0){\n\n                        if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                            // show download progress\n                            $('#determinate-progress-modal .modal-message').\n                            html(`Uploading Evaluation Report ${totalReportSheets - (reportSheets.length - 1)} Of ${totalReportSheets}`);\n                            $('#determinate-progress-modal #determinate-progress').get(0).value =\n                                Math.round(((totalReportSheets - (reportSheets.length - 1)) / totalReportSheets) * 100);\n                        }\n                        // create the FormData object to be used in sending the report sheet\n                        let formData = new FormData();\n                        // attach the evaluation report data to the FormData\n                        formData.set(\"reportData\", JSON.stringify(reportSheets[index]));\n                        // attach the blob for the evaluation pictures 1 - 3 to the FormData\n                        formData.set(\"evaluation-pic-1\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                            getAttachment(reportSheets[index]._id, \"picture1.jpg\"));\n                        formData.set(\"evaluation-pic-2\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        getAttachment(reportSheets[index]._id, \"picture2.jpg\"));\n                        formData.set(\"evaluation-pic-3\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        getAttachment(reportSheets[index]._id, \"picture3.jpg\"));\n\n                        // send the FormData to the server\n                        let serverResponse = await Promise.resolve($.ajax(\n                            {\n                                url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/reports-upload.php\",\n                                //url: \"reports-upload.json\",\n                                type: \"post\",\n                                contentType: false,\n                                beforeSend: function(jqxhr) {\n                                    jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                                },\n                                dataType: \"text\",\n                                timeout: 240000, // wait for 4 minutes before timeout of request\n                                processData: false,\n                                data: formData\n                            }\n                        ));\n\n                        serverResponse = JSON.parse(serverResponse.trim());\n\n                        if(serverResponse.status !== \"success\"){ // the evaluation report could not be saved by the server\n                            throw serverResponse; // throw error and END upload process\n                        }\n\n                        // since server upload of the evaluation report was successful, remove the evaluation report from app database\n                        /*reportSheets[index]._deleted = true;\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.put(reportSheets[index])*/\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        remove(reportSheets[index]._id, reportSheets[index]._rev);\n                        // also remove the evaluation report from the reportSheets array\n                        reportSheets.shift();\n                    }\n\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.compact();\n                    return totalReportSheets; // return the total number of report sheet uploaded\n                }\n                finally {\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                    window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                }\n            }\n        }\n    }\n};\n"]}