{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 26/7/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n    /**\r\n     * property holds the Map objects which will contain a reference to dynamically loaded ES modules.\r\n     * NOTE: modules MUST BE deleted from this property i.e. the Map object when no longer need.\r\n     * This is to enable garbage collection and prevent memory leaks.\r\n     * NOTE: the keys used within the map will be identical to the same map value used in the SystemJS.config()\r\n     */\r\n    LOADED_MODULES: new Map(),\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading App...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            // load the login page\r\n            $('ons-splitter').get(0).content.load(\"login-template\");\r\n\r\n            if(window.localStorage.getItem(\"utopiasoftware-edpms-app-status\") &&\r\n                window.localStorage.getItem(\"utopiasoftware-edpms-app-status\") !== \"\"){ // there is a previous logged in user\r\n                // load the user's login email\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n\r\n                // prepare the inapp browser plugin by removing the default window.open() functionality\r\n                delete window.open;\r\n\r\n                // note: for most promises, we will use async-wait syntax\r\n\r\n                // create the pouchdb app database\r\n                utopiasoftware[utopiasoftware_app_namespace].model.appDatabase = new PouchDB('ptrackerdatabase.db', {\r\n                    adapter: 'cordova-sqlite',\r\n                    location: 'default',\r\n                    androidDatabaseImplementation: 2\r\n                });\r\n\r\n                // get a password for encrypting the app database\r\n                window.localStorage.setItem(\"utopiasoftware-edpms-rid\",\r\n                    Random.uuid4(Random.engines.browserCrypto));\r\n\r\n                utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\r\n                crypto(window.localStorage.getItem(\"utopiasoftware-edpms-rid\"), {ignore: '_attachments'});\r\n            }\r\n            catch(err){\r\n                console.log(\"ERROR\");\r\n            }\r\n            finally{\r\n                 // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#00B2A0\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fullyt loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the LOGIN page\r\n     */\r\n    loginPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the sign-in page\r\n         */\r\n        formValidator: null,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#login-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n                    ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                        buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}) // Ask for confirmation\r\n                        .then(function(index) {\r\n                            if (index === 1) { // OK button\r\n                                navigator.app.exitApp(); // Close the app\r\n                            }\r\n                        });\r\n                };\r\n\r\n                // adjust the window/view-port settings for when the soft keyboard is displayed\r\n                window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n\r\n                // initialise the login form validation\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator =\r\n                    $('#login-form').parsley();\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for log in form field validation success event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for log in form validation success\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('form:success',\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidated);\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n\r\n            try {\r\n                // remove any tooltip being displayed on all forms on the page\r\n                $('#login-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#login-page [data-hint]').removeAttr(\"data-hint\");\r\n                // reset the form validator object on the page\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.reset();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n\r\n            try {\r\n                // remove any tooltip being displayed on all forms on the page\r\n                $('#login-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#login-page [data-hint]').removeAttr(\"data-hint\");\r\n                // reset the form validator object on the page\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.destroy();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the \"Sign In / Log In\" button is clicked\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async loginButtonClicked(){\r\n\r\n            // run the validation method for the sign-in form\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.whenValidate();\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the form is successfully validated\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async formValidated(){\r\n\r\n            // check if Internet Connection is available before proceeding\r\n            if(navigator.connection.type === Connection.NONE){ // no Internet Connection\r\n                // inform the user that they cannot proceed without Internet\r\n                window.plugins.toast.showWithOptions({\r\n                    message: \"You cannot sign in with an Internet Connection\",\r\n                    duration: 4000,\r\n                    position: \"top\",\r\n                    styling: {\r\n                        opacity: 1,\r\n                        backgroundColor: '#ff0000', //red\r\n                        textColor: '#FFFFFF',\r\n                        textSize: 14\r\n                    }\r\n                }, function(toastEvent){\r\n                    if(toastEvent && toastEvent.event == \"touch\"){ // user tapped the toast, so hide toast immediately\r\n                        window.plugins.toast.hide();\r\n                    }\r\n                });\r\n\r\n                return; // exit method immediately\r\n            }\r\n\r\n            // inform user that login validation is taking place\r\n            $('#loader-modal #loader-modal-message').html(\"Signing You In...\");\r\n            await $('#loader-modal').get(0).show();\r\n\r\n            try{\r\n                // create the form data to be submitted\r\n                let formData = {\r\n                    username: $('#login-page #login-email').val().trim(),\r\n                    password: $('#login-page #login-password').val().trim()\r\n                };\r\n\r\n                let serverResponse = await Promise.resolve($.ajax(\r\n                    {\r\n                        url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/login.php\",\r\n                        type: \"post\",\r\n                        contentType: \"application/x-www-form-urlencoded\",\r\n                        beforeSend: function(jqxhr) {\r\n                            jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\r\n                        },\r\n                        dataType: \"text\",\r\n                        timeout: 240000, // wait for 4 minutes before timeout of request\r\n                        processData: true,\r\n                        data: formData\r\n                    }\r\n                ));\r\n                // convert the response to an object\r\n                serverResponse = JSON.parse(serverResponse.trim());\r\n\r\n                // check if the user login was successful\r\n                if(serverResponse.status !== \"success\"){ // user log was NOT successful\r\n                    $('#loader-modal').get(0).hide();\r\n                    throw serverResponse; // throw error\r\n                }\r\n\r\n                // move user to the main menu page\r\n                await Promise.all([$('ons-splitter').get(0).content.load(\"app-main-template\"),\r\n                    $('#loader-modal').get(0).hide()]);\r\n                // display a toast to the user\r\n                ons.notification.toast(`<ons-icon icon=\"md-check\" size=\"20px\" style=\"color: #00D5C3\"></ons-icon> Welcome ${serverResponse.firstname}`, {timeout:3000});\r\n            }\r\n            catch(err){\r\n                ons.notification.confirm(err.message, {title: '<span style=\"color: red\">Sign In Failed</span>',\r\n                    buttonLabels: ['OK'], modifier: 'utopiasoftware-alert-dialog'});\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * this is the view-model/controller for the Search Project page\r\n     */\r\n    searchProjectPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the sign-in page\r\n         */\r\n        formValidator: null,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.backButtonClicked;\r\n\r\n                // initialise the login form validation\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.formValidator =\r\n                    $('#search-project-form').parsley();\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for log in form field validation success event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.\r\n                formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for log in form validation success\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.formValidator.on('form:success',\r\n                    async function(){\r\n                        // hide the device keyboard\r\n                        Keyboard.hide();\r\n                        // perform actions to reveal result\r\n                        kendo.fx($('#search-project-page #search-project-details')).fade(\"in\").duration(550).play();\r\n                        await Promise.\r\n                        resolve(kendo.fx($('#search-project-page ons-bottom-toolbar')).slideIn(\"up\").duration(600).play());\r\n                        $('#search-project-page ons-bottom-toolbar').css(\"display\", \"block\");\r\n                    });\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the \"Project Search\" button is clicked\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async searchButtonClicked(keyEvent){\r\n\r\n            // check which key was pressed\r\n            if(keyEvent.which === kendo.keys.ENTER) // if the enter key was pressed\r\n            {\r\n                // run the validation method for the sign-in form\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.searchProjectPageViewModel.formValidator.whenValidate();\r\n                keyEvent.preventDefault();\r\n                keyEvent.stopImmediatePropagation();\r\n                keyEvent.stopPropagation();\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        backButtonClicked(){\r\n\r\n            ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}) // Ask for confirmation\r\n                .then(function(index) {\r\n                    if (index === 1) { // OK button\r\n                        navigator.app.exitApp(); // Close the app\r\n                    }\r\n                });\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the 'Proceed' button is clicked\r\n         */\r\n        proceedButtonClicked(){\r\n\r\n            // move to the project evaluation page\r\n            $('#app-main-navigator').get(0).pushPage(\"project-evaluation-page.html\", {animation: \"lift-md\"});\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * this is the view-model/controller for the Project Evaluation page\r\n     */\r\n    projectEvaluationPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the sign-in page\r\n         */\r\n        formValidator: null,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false\r\n                || ! ej){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.projectEvaluationPageViewModel.backButtonClicked;\r\n\r\n                // create the slider elements\r\n                $('#project-evaluation-page .project-evaluation-slider').\r\n                each(function(index, element){\r\n                    let aSlider = new ej.inputs.Slider({\r\n                        min: 0,\r\n                        max: 100,\r\n                        value: 25,\r\n                        step: 1,\r\n                        orientation: 'Horizontal',\r\n                        type: 'MinRange',\r\n                        created: function(){\r\n                            $('.e-handle', element).text(this.value);\r\n                        },\r\n                        change: function(changeEvent){\r\n                            $('.e-handle', element).text(changeEvent.value);\r\n                        }\r\n                    });\r\n                    aSlider.appendTo(element);\r\n                });\r\n\r\n\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the device back button is clicked OR a similar action is triggered\r\n         */\r\n        backButtonClicked(){\r\n\r\n            // move to the project evaluation page\r\n            $('#app-main-navigator').get(0).popPage();\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the \"project evaluation carousel\" is changed\r\n         * @param event\r\n         */\r\n        carouselChanged(event){\r\n            // change the css display the prev fab button\r\n            $('#project-evaluation-prev-button').css(\"display\", \"inline-block\");\r\n             // check if the carousel is at the last item\r\n            if(event.originalEvent.activeIndex === 2) { // this is the last carousel item, so hide the next slide button\r\n                // hide the next fab button\r\n                $('#project-evaluation-next-button').css(\"transform\", \"scale(0)\");\r\n            }\r\n            else if(event.originalEvent.activeIndex === 0) { // this is the first carousel item, so hide the prev slide button\r\n                // hide the prev fab button\r\n                $('#project-evaluation-prev-button').css(\"transform\", \"scale(0)\");\r\n            }\r\n            else { // this is not the first or last item\r\n                $('#project-evaluation-prev-button,#project-evaluation-next-button').css(\"transform\", \"scale(1)\");\r\n            }\r\n\r\n            // change the milestone number\r\n            $('#project-evaluation-milestone-badge').html(`Milestone ${event.originalEvent.activeIndex + 1}`)\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the \"prev button\" for the carousel is clicked\r\n         */\r\n        prevButtonClicked(){\r\n            $('#project-evaluation-page #project-evaluation-carousel').get(0).prev();\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the \"next button\" for the carousel is clicked\r\n         */\r\n        nextButtonClicked(){\r\n            $('#project-evaluation-page #project-evaluation-carousel').get(0).next();\r\n        }\r\n\r\n    }\r\n};\r\n\r\n\r\n"]}