{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 26/7/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n    /**\r\n     * property holds the Map objects which will contain a reference to dynamically loaded ES modules.\r\n     * NOTE: modules MUST BE deleted from this property i.e. the Map object when no longer need.\r\n     * This is to enable garbage collection and prevent memory leaks.\r\n     * NOTE: the keys used within the map will be identical to the same map value used in the SystemJS.config()\r\n     */\r\n    LOADED_MODULES: new Map(),\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // displaying prepping message\r\n            $('#loader-modal-message').html(\"Loading App...\");\r\n            $('#loader-modal').get(0).show(); // show loader\r\n\r\n            // load the login page\r\n            $('ons-splitter').get(0).content.load(\"login-template\");\r\n\r\n            if(window.localStorage.getItem(\"utopiasoftware-edpms-app-status\") &&\r\n                window.localStorage.getItem(\"utopiasoftware-edpms-app-status\") !== \"\"){ // there is a previous logged in user\r\n                // load the user's login email\r\n            }\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                screen.orientation.lock('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n\r\n                // prepare the inapp browser plugin by removing the default window.open() functionality\r\n                delete window.open;\r\n\r\n                // note: for most promises, we weill use async-wait syntax\r\n                // var a = await Promise.all([SystemJS.import('@syncfusion/ej2-base'), SystemJS.import('@syncfusion/ej2-dropdowns')]);\r\n            }\r\n            catch(err){\r\n            }\r\n            finally{\r\n                 // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#00B2A0\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // flag that app is fullyt loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * this is the view-model/controller for the LOGIN page\r\n     */\r\n    loginPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the sign-in page\r\n         */\r\n        formValidator: null,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#login-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n                    ons.notification.confirm('Do you want to close the app?', {title: 'Exit App',\r\n                        buttonLabels: ['No', 'Yes'], modifier: 'utopiasoftware-alert-dialog'}) // Ask for confirmation\r\n                        .then(function(index) {\r\n                            if (index === 1) { // OK button\r\n                                navigator.app.exitApp(); // Close the app\r\n                            }\r\n                        });\r\n                };\r\n\r\n                // initialise the login form validation\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator =\r\n                    $('#login-form').parsley();\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for log in form field validation success event\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for log in form validation success\r\n                utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.on('form:success',\r\n                    function(){\r\n                        // load the login page\r\n                        $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n                    });\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            window.SoftInputMode.set('adjustPan'); // let the window/view-port 'pan' when the soft keyboard is displayed\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // adjust the window/view-port settings for when the soft keyboard is displayed\r\n            // window.SoftInputMode.set('adjustResize'); // let the view 'resize' when the soft keyboard is displayed\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the \"Sign In / Log In\" button is clicked\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async loginButtonClicked(){\r\n\r\n            // run the validation method for the sign-in form\r\n            utopiasoftware[utopiasoftware_app_namespace].controller.loginPageViewModel.formValidator.whenValidate();\r\n        }\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\n"]}